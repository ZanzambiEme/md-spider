    # !/usr/bin/env python3
try:
    from curses import meta
    from matplotlib.pyplot import title


    try:
    
        from core.config import ACTION_VALIDATE

        import os
        import json  
        
        import random
        import logging
        import platform
        import argparse
        
        
        import core.config
        import core.colors as color
        import core.utils as utilsfucntions
        from core.utils import logginStore
        
        ## importação de modos de ação
        from mode.xss import _xss
        from mode.sql import _sqlInjection
    
        # Web spider Banner 
        from core.banner import WELCOME_BANNER 
        print('\t'+color.green+random.choice(WELCOME_BANNER).center(10)+color.end)
        
        logginStore()
        
        logging.info('[Start on -{} ]'. format(platform.platform()))
        
        
        system    = platform.system () 
        release   = platform.release()
        version   = platform.version()
        arquitect = platform.machine()
        
        sys_info = {'platform':{'system':system, 'release':release, 'version':version, 'machine':arquitect}}
        json_dic = {}
        
        ''' ##desabilitado por enquanto
    try:
            with  open('./logs/logs.json', 'a+') as logs_json:
                js = json.dumps([sys_info, json_dic], separators=(',', ':') , sort_keys=True, indent=4)
                logs_json.write(js)
        except FileNotFoundError as e:
            print('Arquivo não encontrado')  #desabilitado por enquanto.... NOTA BEM!
        '''
        
        parse = argparse.ArgumentParser(description='Detetor de Vulnerabilidades web', prog='spider', epilog='CopyRight Spider Developers')
        
        parse.add_argument('-u', metavar='', help='alvo e.g. http://www.site.com/vuln.php ou http://www.site.com/vuln.php?id=1- para alvos injeção sql', dest='target') 
        parse.add_argument('-t', metavar='', help='Tempo de Requisição http', type=float) 
        parse.add_argument('-d', metavar='', help='Payloads a serem enviados. (eg: "id=1")', dest='payload')
        parse.add_argument('-v', help='Verbose, mostra processos em background', action='store_true') 
        
        parse.add_argument('-pN', metavar='', help='Nome de plugin a ser explorado a busca de falhas', dest='plugin_name')
        parse.add_argument('--jquery', help='Verificar por potenciais falhas na versão do jquery', action='store_true', dest='jquery')
        parse.add_argument('--wordpress', help='Verificar versões vulneráveis do plugins Wordpress, trabalha em combinação com a flag -pN', action='store_true', dest='wordpress')
        parse.add_argument('--laravel', help='Verificar versões vulneráveis no Laravel no alvo', action='store_true', dest='laravel')
        parse.add_argument('--nodeJs', help='Verificar versões vulneráveis no Laravel no alvo nodeJs no alvo passado', action='store_true', dest='nodejs')
        parse.add_argument('--proxy', metavar='', help='Servidor proxy (eg: --proxy 0.0.0.0:8080)', dest='proxy_server')
        parse.add_argument('--cookie', metavar='', help='Cookies http a serem usados (eg: PHPSESSID=a8d127e...)', dest='cookie')
        
        Injection = parse.add_argument_group(title='Injeções')
        Injection.add_argument('-html', help='injeção html',action='store_true',dest='html')
        Injection.add_argument('-iframe', help='injeção  iframe', action='store_true', dest='iframe')
        Injection.add_argument('-sh', help='Injeção de sessão', action='store_true', dest='sh')
        Injection.add_argument('-sql', help='injeção sql', action='store_true', dest='sql')
        Injection.add_argument('-os', help='injeção  os', action='store_true', dest='os')
        Injection.add_argument('-xss',help='Cross-Site Srcipting (xss)', action='store_true', dest='xss')
            
        other = parse.add_argument_group( title='Outras Vulnerabilidades...')
        
        other.add_argument('-http',help='Poluição dos Parâmetros HTTP', action='store_true',dest='http')
        other.add_argument('-ma', help='Ataque de Atribuição em Massa ', action='store_true', dest='ma')
        
        try:
            args    = parse.parse_args()
            
            PAYLOADS  = args.payload
            TIMOUT  = args.t
            VERBOSE  = args.v
            
            TARGET_URL       = args.target
            HTML_INJECTION   = args.html
            IFRAME_INJECTION = args.iframe
            SQL_INJECTION    = args.sql
            OS_INJECTION     = args.os
            XSS              = args.xss
            HTTP_POLUITION   = args.http
            SH_INJECTION     = args.sh
            MASS_ACTACK      = args.ma
            
            ## algumas tecnologias com vulnerabilidades conhecida
            PLUGIN_NAME = args.plugin_name
            JQUERY      = args.jquery
            WORDPRESS   = args.wordpress
            LARAVEL     = args.laravel
            NODEJS      = args.nodejs
        
            
            if TARGET_URL:
                if(utilsfucntions.urlValidator(TARGET_URL) == True):
                    if HTML_INJECTION:
                        print
                        ACTION_VALIDATE = True
                    if IFRAME_INJECTION:
                        print
                        ACTION_VALIDATE = True
                    if SQL_INJECTION:
                        _sqlInjection(TARGET_URL)                    
                        ACTION_VALIDATE = True
                    if OS_INJECTION:
                        print
                        ACTION_VALIDATE = True
                    if XSS:
                        _xss(TARGET_URL, TIMOUT, VERBOSE)
                        ACTION_VALIDATE = True
                    if HTTP_POLUITION:
                        print
                        ACTION_VALIDATE = True
                    if SH_INJECTION:
                        print ("Ataque de sessão")
                        ACTION_VALIDATE = True
                    if MASS_ACTACK:
                        print ("Atribuição em massa")
                        ACTION_VALIDATE = True
                    if WORDPRESS:
                        ACTION_VALIDATE = True
                        if PLUGIN_NAME:
                            ## usuário passou o nome de plugin a verificar pelas falhas
                            print()
                        else:
                            print(color.info_1+color.red_0+color.info_2+" Aviso:"+color.end+color.orange+"Não foi passada o  " +color.red+"nome do plugin "+color.orange+", o processo praa a detenção dos tipos no alo pode levar muito tempo."+color.end, end='') 
                            USER_CHOISE = str(input(" Deseja continuar? (s/n):")) 
                            if USER_CHOISE.lower() == 's':
                                print("Usuário escolheu o caminho longo")
                            if USER_CHOISE.lower() == 'n':
                                print(color.info_1+color.red_0+color.info_2+" Aviso:"+color.end+color.orange+" Saindo... "+color.end)
                                quit()
                    if ACTION_VALIDATE == False:
                        print(color.info_1+color.red_0+color.info_2+color.red+ " Erro:"+color.orange+" Modo de Ação não detectado, execute"+color.red+ " [compilador] spider [-h] " +color.orange+  "para ver os modos a usar com o spider")
                        logging.error("Sem modo de Ação")
                        quit()
                else: 
                    print(color.info_1+color.red_0+color.info_2+color.red+ " Erro:"+color.orange+" Falha na Resolução de DNS, Verifique se há um erro de digitação em "+color.red+TARGET_URL+color.end+color.end)
                    logging.error("Alvo desconhecido")
                    quit()
            else:
                print(color.info_1+color.red_0+color.info_2+color.red+ " Erro:"+color.orange+" Sem alvo passado, execute"+color.red+ " [compilador] spider [-h] " +color.orange+  "para ver as opões a usar com o spider") 
                logging.error("[Sem alvo]")
                quit()
        except AttributeError as e:
            print(color.info_1+color.red_0+color.info_2+color.red+ " Erro:"+color.orange+" O programa não conseguiu processar a atribuição do argumento ou "+color.red, e, color.end+ ", saindo...")
            logging.error('Error parsing parameters')
    except ImportError as e:
        print(color.info_1+color.red_0+color.info_2+color.red+ " Erro:"+color.orange+" O programa não consegue importar um ou mais módulos ... saindo..")
        logging.error('Import Module Error')
except KeyboardInterrupt as e:
    print(color.info_1+color.red_0+color.info_2+" Erro: "+color.red+"Interrupção"+color.orange+" pela parte do usuário"+color.red+" Saindo..."+color.end)
    quit()       